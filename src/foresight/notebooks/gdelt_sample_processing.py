# -*- coding: utf-8 -*-
"""gdelt_sample_processing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Tr0Lhv2vlRyiCYVBKW6iTS49QHriD6os

This notebook contains the pipeline to preprocess the GDELT dataset to prepare for training. It starts with the currently available sample data but can be applied to the full data/updated format with a few small changes.
"""

import pandas as pd

# Download sample data from drive (only relevant for this sample)
from google.colab import drive
drive.mount('/content/drive/')
data_dir = "/content/drive/My Drive/sample gdelt data"
df = pd.read_parquet(f'{data_dir}/gdelt.parquet')
len(df)
# 214112

# Keep one row per document (arbitrarily chose last hoping last is more accurate)
df.drop_duplicates(subset=['DocumentIdentifier'], keep='last',
                        ignore_index=True, inplace=True)
len(df)
# 176340

# Country specific steps aim to get this sample closer to newer dataset format,
# they won't be needed for future dataset
def get_country(idx, row):
    try:
        return row.loc['countries'][idx]
    except IndexError:
        return None

def process_countries(dataframe):
    """Drop rows without countries and split 'countries' to separate columns."""
    dataframe.dropna(subset=['countries'], inplace=True)
    dataframe['country-1'] = dataframe.apply(lambda x: get_country(0, x), axis=1)
    dataframe['country-2'] = dataframe.apply(lambda x: get_country(1, x), axis=1)
    dataframe['country-3'] = dataframe.apply(lambda x: get_country(2, x), axis=1)
    return dataframe

df = process_countries(df)
len(df)
# 89666

# Temporarily create fake year/month to imitate longer period

n = len(df)/12
fake_month = lambda x: int(x//n + 1)
def fake_yearmonth(ix):
    month = fake_month(ix)
    if month < 10:
        return f'20200{month}'
    return f'2020{month}'

df.reset_index(inplace=True)
df['ix'] = df.index
df['fake_yearmonth'] = df['index'].apply(fake_yearmonth)
df.head()

def pick_country_label(row):
    return row[f'country-{row["country_idx"]}']

def create_row_per_country(dataframe):
    # first duplicate everything 3 times
    dataframe = dataframe.loc[dataframe.index.repeat(3)]
    dataframe.reset_index(inplace=True)
    # Which of the three country columns applies to this row
    dataframe['country_idx'] = pd.Series([1, 2, 3]*(len(dataframe)//3))
    # Assign a sinlge country label for each row
    dataframe['country_label'] = dataframe.apply(pick_country_label, axis=1)
    # Finally drop rows without country labels (docs with fewer than 3 countries)
    dataframe.dropna(subset=['country_label'], inplace=True)
    return dataframe

df = create_row_per_country(df)
len(df)

df.head()

df.to_parquet(f'{data_dir}/gdelt_processed.parquet')

columns = [col for col in df.columns if col.startswith('docembed')]
columns += ['country_label', 'fake_yearmonth']
embedding_only = df[columns]
embedding_only.head()

embedding_only.to_parquet(f'{data_dir}/gdelt_embeddings.parquet')

